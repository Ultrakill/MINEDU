/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controladores.AsignacionHorarioControlador;
import controladores.Controlador;
import controladores.EmpleadoControlador;
import controladores.GrupoHorarioControlador;
import controladores.HorarioControlador;
import entidades.AsignacionHorario;
import entidades.Empleado;
import entidades.GrupoHorario;
import entidades.Horario;
import vistas.dialogos.DlgEmpleado;
import vistas.dialogos.DlgVerIntegrantes;
import vistas.modelos.MTAsignacion;
import com.personal.utiles.FormularioUtil;
import entidades.AsignacionPermiso;
import entidades.Permiso;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import vistas.dialogos.DlgImportarDNI;

/**
 *
 * @author fesquivelc
 */
public class FrmAsignacionHorario_1 extends javax.swing.JInternalFrame {

    /**
     * Creates new form AsignacionHorario
     */
    private List<Horario> horarioList;
    private List<GrupoHorario> grupoList;
    private HorarioControlador hc;
    private AsignacionHorarioControlador controlador;
    private Empleado empleadoSeleccionado;
    private List<Empleado> empleadoList;
    private Horario horarioSeleccionado;
    private EmpleadoControlador ec;
    private GrupoHorarioControlador gc;
    private int accion;
    private GrupoHorario grupoSeleccionado;

    private List<AsignacionHorario> listado;

    public FrmAsignacionHorario_1() {
        initComponents();
        inicializar();
        bindeoSalvaje();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        grupoEOG = new javax.swing.ButtonGroup();
        pnlListado = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new org.jdesktop.swingx.JXTable();
        pnlNME = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnModificar1 = new javax.swing.JButton();
        pnlDatos = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboHorario = new javax.swing.JComboBox();
        btnVerHorario = new javax.swing.JButton();
        radEmpleado = new javax.swing.JRadioButton();
        radGrupoHorario = new javax.swing.JRadioButton();
        txtEmpleado = new javax.swing.JTextField();
        btnEmpleado = new javax.swing.JButton();
        cboGrupo = new javax.swing.JComboBox();
        btnVerGrupoHorario = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dcFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        dcFechaFin = new com.toedter.calendar.JDateChooser();
        btnCargar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        grupoEOG.add(radEmpleado);
        grupoEOG.add(radGrupoHorario);

        setClosable(true);
        setMaximizable(true);
        setTitle("ASIGNAR HORARIO");
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        pnlListado.setBorder(javax.swing.BorderFactory.createTitledBorder("Horarios asignados"));
        pnlListado.setLayout(new java.awt.GridBagLayout());

        tblTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTablaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblTabla);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlListado.add(jScrollPane1, gridBagConstraints);

        pnlNME.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        pnlNME.add(btnNuevo);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        pnlNME.add(btnModificar);

        btnModificar1.setText("Eliminar");
        btnModificar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificar1ActionPerformed(evt);
            }
        });
        pnlNME.add(btnModificar1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlListado.add(pnlNME, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlListado, gridBagConstraints);

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de asignaci√≥n"));
        pnlDatos.setLayout(new java.awt.GridBagLayout());

        java.awt.GridBagLayout jPanel4Layout = new java.awt.GridBagLayout();
        jPanel4Layout.columnWidths = new int[] {0, 6, 0, 6, 0};
        jPanel4Layout.rowHeights = new int[] {0, 6, 0, 6, 0};
        jPanel4.setLayout(jPanel4Layout);

        jLabel1.setText("Horario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel1, gridBagConstraints);

        cboHorario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        jPanel4.add(cboHorario, gridBagConstraints);

        btnVerHorario.setText("Ver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(btnVerHorario, gridBagConstraints);

        radEmpleado.setText("Empleado:");
        radEmpleado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radEmpleadoStateChanged(evt);
            }
        });
        radEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radEmpleadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(radEmpleado, gridBagConstraints);

        radGrupoHorario.setSelected(true);
        radGrupoHorario.setText("Grupo horario:");
        radGrupoHorario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radGrupoHorarioStateChanged(evt);
            }
        });
        radGrupoHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGrupoHorarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(radGrupoHorario, gridBagConstraints);

        txtEmpleado.setEditable(false);
        txtEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpleadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel4.add(txtEmpleado, gridBagConstraints);

        btnEmpleado.setText("...");
        btnEmpleado.setEnabled(false);
        btnEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpleadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(btnEmpleado, gridBagConstraints);

        cboGrupo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(cboGrupo, gridBagConstraints);

        btnVerGrupoHorario.setText("Ver");
        btnVerGrupoHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerGrupoHorarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        jPanel4.add(btnVerGrupoHorario, gridBagConstraints);

        jLabel2.setText("Fecha de inicio:");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(dcFechaInicio, gridBagConstraints);

        jLabel3.setText("Fecha de fin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(dcFechaFin, gridBagConstraints);

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        jPanel4.add(btnCargar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel5.add(btnGuardar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel5.add(btnCancelar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnlDatos, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        this.accion = Controlador.NUEVO;
        controlador.prepararCrear();
        this.controles(accion);
        this.checkboxes();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            this.accion = Controlador.MODIFICAR;
            controlador.setSeleccionado(this.listado.get(fila));
            this.actualizarTabla();
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnModificar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificar1ActionPerformed
        // TODO add your handling code here:
        int fila;
        if ((fila = tblTabla.getSelectedRow()) != -1) {
            accion = Controlador.ELIMINAR;
            if (FormularioUtil.dialogoConfirmar(this, accion)) {
                controlador.setSeleccionado(this.listado.get(fila));
                if(controlador.accion(accion)){
                    FormularioUtil.mensajeExito(this, accion);
                    accion = 0;
                    this.controles(accion);
                    this.checkboxes();
                }
                
                
            }
        }

    }//GEN-LAST:event_btnModificar1ActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if (erroresFormulario()) {
            return;
        }
        if (FormularioUtil.dialogoConfirmar(this, accion)) {
            AsignacionHorario seleccionada = this.controlador.getSeleccionado();

            FormularioUtil.convertirMayusculas(this.pnlDatos);

            seleccionada.setHorario(horarioList.get(cboHorario.getSelectedIndex()));
            boolean bandera = true;
            if (radGrupoHorario.isSelected()) {
                seleccionada.setGrupoHorario(grupoList.get(cboGrupo.getSelectedIndex()));
            } else if(radEmpleado.isSelected()){
                if(empleadoList==null){
                    seleccionada.setEmpleado(empleadoSeleccionado.getNroDocumento());
                    //Agregado para manejar las fechas en empleados.
                    AsignacionHorario asigPrevia = this.controlador.buscarXEmpleadoXFechaFinNull2(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
                    if(asigPrevia!=null){
                        Calendar fechaAsig = Calendar.getInstance();
                        fechaAsig.setTime(dcFechaInicio.getDate());
                        fechaAsig.add(Calendar.DATE, -1);
                        asigPrevia.setFechaFin(fechaAsig.getTime());
                        this.controlador.setSeleccionado(asigPrevia);
                        this.controlador.accion(2);
                        this.controlador.setSeleccionado(seleccionada);
                    }
                    seleccionada.setFechaInicio(dcFechaInicio.getDate());
                    seleccionada.setFechaFin(dcFechaFin.getDate());               
                }else{
                    for(Empleado e : empleadoList){
                        System.out.println("Dni ingresado: "+e.getNroDocumento()+" "+e.getNombre());
//                        seleccionada.setEmpleado(e.getNroDocumento());
//                        //Agregado para manejar las fechas en empleados.
                        AsignacionHorario asigPrevia;
                        if(this.controlador.buscarXEmpleadoXFechaFinNull2(e.getNroDocumento(), dcFechaInicio.getDate())!=null){
                            asigPrevia = this.controlador.buscarXEmpleadoXFechaFinNull2(e.getNroDocumento(), dcFechaInicio.getDate());
                        }else{
                            asigPrevia = null;
                        }
//                        
                        if(asigPrevia!=null){
                            Calendar fechaAsig = Calendar.getInstance();
                            fechaAsig.setTime(dcFechaInicio.getDate());
                            fechaAsig.add(Calendar.DATE, -1);
                            asigPrevia.setFechaFin(fechaAsig.getTime());
                            this.controlador.setSeleccionado(asigPrevia);
                            this.controlador.accion(2);
                            this.controlador.setSeleccionado(seleccionada);
                        }
//                        seleccionada.setFechaInicio(dcFechaInicio.getDate());
//                        seleccionada.setFechaFin(dcFechaFin.getDate());
//                        this.controlador.accion(1);
                        //===============================================================
                        AsignacionHorario newAsigh = new AsignacionHorario();
                        newAsigh.setEmpleado(e.getNroDocumento());
                        newAsigh.setFechaInicio(dcFechaInicio.getDate());
                        newAsigh.setFechaFin(dcFechaFin.getDate());
                        newAsigh.setGrupoHorario(null);
                        newAsigh.setHorario(horarioList.get(cboHorario.getSelectedIndex()));
                        newAsigh.setPorGrupo(false);
                        this.controlador.setSeleccionado(newAsigh);
                        if(controlador.accion(1)){
                            System.out.println("Guardado");
                        }else{
                            System.out.println("Falla al ingresar");
                        }               
                    }
                    bandera = false;
                }              
            }

            seleccionada.setPorGrupo(radGrupoHorario.isSelected());
            if(bandera){
                if (controlador.accion(accion)) {
                    FormularioUtil.mensajeExito(this, accion);
                    this.accion = 0;
                    FormularioUtil.limpiarComponente(this.pnlDatos);
                    this.controles(accion);
                    this.actualizarTabla();
                } else {
                    FormularioUtil.mensajeError(this, accion);
                }
            }else{
                System.out.println("Se ingreso personal por csv");
                this.accion = 0;
                    FormularioUtil.limpiarComponente(this.pnlDatos);
                    this.controles(accion);
                    this.actualizarTabla();
            }

        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.accion = 0;
        this.controles(accion);
        FormularioUtil.limpiarComponente(this.pnlDatos);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void radGrupoHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGrupoHorarioActionPerformed
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radGrupoHorarioActionPerformed

    private void radEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radEmpleadoActionPerformed
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radEmpleadoActionPerformed

    private void tblTablaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTablaMouseReleased
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            mostrar(listado.get(fila));
        }
    }//GEN-LAST:event_tblTablaMouseReleased

    private void radGrupoHorarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radGrupoHorarioStateChanged
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radGrupoHorarioStateChanged

    private void radEmpleadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radEmpleadoStateChanged
        // TODO add your handling code here:
        checkboxes();
    }//GEN-LAST:event_radEmpleadoStateChanged

    private void btnEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpleadoActionPerformed
        // TODO add your handling code here:
        DlgEmpleado seleccion = new DlgEmpleado(this);
        empleadoSeleccionado = seleccion.getSeleccionado();
        if (empleadoSeleccionado != null) {
            txtEmpleado.setText(empleadoSeleccionado.getApellidoPaterno() + " " + empleadoSeleccionado.getApellidoMaterno() + " " + empleadoSeleccionado.getNombre());
        }
    }//GEN-LAST:event_btnEmpleadoActionPerformed

    private void btnVerGrupoHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerGrupoHorarioActionPerformed
        // TODO add your handling code here:
        int grupo = this.cboGrupo.getSelectedIndex();
        if (grupo != -1) {
            grupoSeleccionado = grupoList.get(grupo);
            DlgVerIntegrantes integrantes = new DlgVerIntegrantes(this, grupoSeleccionado);
            integrantes.setVisible(true);
        }

    }//GEN-LAST:event_btnVerGrupoHorarioActionPerformed

    private void txtEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpleadoActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        DlgImportarDNI importar = new DlgImportarDNI(this);
        List<String> dnis = importar.obtenerDNI();
        empleadoList = ec.buscarPorLista(dnis);
        
    }//GEN-LAST:event_btnCargarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnEmpleado;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnModificar1;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnVerGrupoHorario;
    private javax.swing.JButton btnVerHorario;
    private javax.swing.JComboBox cboGrupo;
    private javax.swing.JComboBox cboHorario;
    private com.toedter.calendar.JDateChooser dcFechaFin;
    private com.toedter.calendar.JDateChooser dcFechaInicio;
    private javax.swing.ButtonGroup grupoEOG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlListado;
    private javax.swing.JPanel pnlNME;
    private javax.swing.JRadioButton radEmpleado;
    private javax.swing.JRadioButton radGrupoHorario;
    private org.jdesktop.swingx.JXTable tblTabla;
    private javax.swing.JTextField txtEmpleado;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        this.accion = 0;

        controlador = new AsignacionHorarioControlador();
        hc = new HorarioControlador();
        gc = new GrupoHorarioControlador();
        ec = new EmpleadoControlador();
        listado = ObservableCollections.observableList(new ArrayList<AsignacionHorario>());
        horarioList = hc.buscarTodos();
        grupoList = gc.buscarTodos();

        this.controles(accion);

    }

    private void controles(int accion) {
        boolean bandera = accion == Controlador.NUEVO || accion == Controlador.MODIFICAR;

        FormularioUtil.activarComponente(this.pnlListado, !bandera);
        FormularioUtil.activarComponente(this.pnlDatos, bandera);

        if (accion != Controlador.MODIFICAR) {
            FormularioUtil.limpiarComponente(this.pnlDatos);

        }
    }

    private void bindeoSalvaje() {
        BindingGroup bindeo = new BindingGroup();
        JComboBoxBinding bindHorario = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, horarioList, cboHorario);
        JComboBoxBinding bindGrupo = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, grupoList, cboGrupo);

        bindeo.addBinding(bindGrupo);
        bindeo.addBinding(bindHorario);

        bindeo.bind();

        DefaultListCellRenderer renderHorario = new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof Horario) {
                    value = ((Horario) value).getNombre();
                }

                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }

        };

        DefaultListCellRenderer renderGrupo = new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof GrupoHorario) {
                    value = ((GrupoHorario) value).getNombre();
                }

                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }

        };

        cboHorario.setRenderer(renderHorario);
        cboGrupo.setRenderer(renderGrupo);

        String[] columnas = {"Horario", "Jornada", "L", "M", "M", "J", "V", "S", "D", "Asignado a"};

        MTAsignacion mt = new MTAsignacion(listado, columnas);

        tblTabla.setModel(mt);
    }

    private void checkboxes() {
        if (accion != 0) {
            boolean porGrupo = radGrupoHorario.isSelected();

            FormularioUtil.activarComponente(btnEmpleado, !porGrupo);
            FormularioUtil.activarComponente(cboGrupo, porGrupo);
            FormularioUtil.activarComponente(txtEmpleado, false);
            FormularioUtil.activarComponente(dcFechaInicio, radEmpleado.isSelected());
            FormularioUtil.activarComponente(btnCargar, radEmpleado.isSelected());
            FormularioUtil.activarComponente(dcFechaFin,radEmpleado.isSelected());
        }

    }

    private void actualizarTabla() {
        listado.clear();
        listado.addAll(controlador.buscarTodos());
        tblTabla.packAll();
    }

    private void mostrar(AsignacionHorario asignacion) {
        cboHorario.setSelectedItem(asignacion.getHorario());
        boolean porGrupo = asignacion.isPorGrupo();

        radEmpleado.setSelected(!porGrupo);
        radGrupoHorario.setSelected(porGrupo);

        checkboxes();

        if (porGrupo) {
            cboGrupo.setSelectedItem(asignacion.getGrupoHorario());
        } else {
            Empleado e = ec.buscarPorId(asignacion.getEmpleado());
            txtEmpleado.setText(e.getApellidoPaterno() + " " + e.getApellidoMaterno() + " " + e.getNombre());
            dcFechaInicio.setDate(asignacion.getFechaInicio());
            dcFechaFin.setDate(asignacion.getFechaFin());
        }
    }
    
    private boolean erroresFormulario() {
        int errores = 0;
        Date fechaInicio = dcFechaInicio.getDate();

        String mensaje = "";
//        if (radEmpleado.isSelected()) {
//            if(dcFechaFin.getDate()!=null){
//                Date fechaFin = dcFechaFin.getDate();
//                if (fechaInicio.compareTo(fechaFin) > 0) {
//                    errores++;
//                    mensaje = ">La fecha de inicio debe ser menor que la fecha de fin\n";
//                }
//            }
//            
//            //Traemos los dnis de los empleados
//            if(accion==1){
//                //AsignacionHorario paraComprobar = this.controlador.getSeleccionado();
//                //System.out.println("Empleado escogido: "+empleadoSeleccionado.getNroDocumento() + " "+empleadoSeleccionado.getNombre());
//                //System.out.println("Fecha de inicio de horario: "+paraComprobar.getFechaInicio().toString());
//                //List<AsignacionPermiso> lista = ac.buscarXFechaDni(asignacion.getEmpleado(), fechaInicio);
//                //Caso 1: La asignacion se ingresa reemplazando a una asignacion con una fecha fin nula.
//                AsignacionHorario lista1 = controlador.buscarXEmpleadoXFechaFinNull(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
//                //Caso 2: Buscar si la asignacion esta entre alguna fecha inicio o fin
//                List<AsignacionHorario> lista2 = controlador.buscarXEmpleadosXFecha(empleadoSeleccionado.getNroDocumento(), dcFechaInicio.getDate());
//                System.out.println("Fecha y hora: "+fechaInicio.toString());
//                if(lista1==null){
//
//                }else{
//                   errores++;
//                   mensaje = "El empleado "+empleadoSeleccionado.getNroDocumento()+" tiene conflicto con un horario a√±adido anteriormente \n Ingrese otro rango de fechas \n";
//                }
//                if(lista2.isEmpty()){
//
//                }else{
//                   errores++;
//                   mensaje = "El empleado "+empleadoSeleccionado.getNroDocumento()+" tiene conflicto con un horario a√±adido anteriormente \n Ingrese otro rango de fechas \n";
//                }
//                
//            }
//            //Traemos los permisos por dni
//        }
        if (errores > 0) {
            JOptionPane.showMessageDialog(this, "Se ha(n) encontrado el(los) siguiente(s) error(es):\n" + mensaje, "Mensaje del sistema", JOptionPane.ERROR_MESSAGE);
        }
        return errores != 0;
    }
}
